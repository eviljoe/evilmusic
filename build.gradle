/*
 * EvilMusic - Web-Based Music Player
 * Copyright (C) 2015 Joe Falascino
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/////////////
// Plugins //
/////////////

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'lesscss'

//////////////
// Settings //
//////////////

// Sets the Java source version to Java v1.7
sourceCompatibility = '1.7'

// The current version of EvilMusic
version = '0.1.a'

// Allows Tomcat to be debuged
applicationDefaultJvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000"]

// Can be populated with the EvilMusic properties file that will be used instead of the default one.
def configFile = null;

// Sets the embedded Tomcat version
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.apache.tomcat.embed') {
            details.useVersion '8.0.15'
        }
    }
}

/////////////////
// Source Sets //
/////////////////

sourceSets {
    intTest {
        java.srcDir file('src/inttest/java')
        resources.srcDir file('src/inttest/resources')
    }
}

/////////////////////////////////
// Repositories & Dependencies //
/////////////////////////////////

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile 'org.springframework:spring-context:4.1.1.RELEASE'
    compile 'org.springframework:spring-webmvc:4.1.1.RELEASE'
    compile 'org.springframework:spring-web:4.1.1.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-web:1.1.8.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:1.1.8.RELEASE'
    compile 'org.springframework.boot:spring-boot-autoconfigure:1.1.8.RELEASE'
    compile 'com.sun.jersey:jersey-server:1.18'
    compile 'com.sun.jersey:jersey-core:1.18'
    compile 'com.sun.jersey:jersey-servlet:1.18'
    compile 'org.apache.derby:derby:10.11.1.1'
    compile 'org.hibernate:hibernate-entitymanager:4.3.6.Final'
    compile 'commons-cli:commons-cli:1.2'

    testCompile 'junit:junit:4.11'
    testCompile 'org.easymock:easymock:3.2'
    testCompile 'com.jayway.restassured:rest-assured:2.4.0'

    intTestCompile sourceSets.main.output
    intTestCompile configurations.testCompile
    intTestCompile sourceSets.test.output
    intTestRuntime configurations.testRuntime
}

//////////////////////
// Plugin Functions //
//////////////////////

/* Necessary for the spring-boot plugin. */
buildscript {
    repositories {
        maven { url "http://repo.spring.io/libs-release" }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        // Necessary For Spring Boot
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.1.8.RELEASE'

        // Necessary For LESS
        classpath 'de.obqo.gradle:gradle-lesscss-plugin:1.0-1.3.3'
    }
}

///////////
// Tasks //
///////////

/* Integration Test Task */
task intTest(type: Test) {
    testClassesDir = sourceSets.intTest.output.classesDir
    classpath = sourceSets.intTest.runtimeClasspath
}

/* LESS Task */
lesscss {
    source = fileTree('src/main/webapp/assets/less') {
        include '*.less'
    }
    dest = 'src/main/webapp/assets/css'
    compress = false
}

processResources {
    dependsOn 'lesscss' // 'lesscss' will be invoked every time 'processResources' is invoked
}

war {
    exclude 'assets/less' // Ensures LESS files do not make it into the WAR
}

/* Configures the "bootRun" task to start EvilMusic with the development test properties file. */
task configDev {
    doFirst { configFile = 'config/dev.properties' }
}

/* Configures the "bootRun" task to start EvilMusic with the integration test properties file. */
task configIntTest {
    doFirst { configFile = 'config/int-test.properties' }
}

/* Creates a task that will start Spring Boot after configuring using the integration test properties file. */
task bootRunIntTest {
	dependsOn 'configIntTest', 'bootRun'
}

/* Creates a task that will start Spring Boot after configuring using the development properties file. */
task bootRunDev {
	dependsOn 'configDev', 'bootRun'
}

bootRun {
    mustRunAfter 'configDev'
    mustRunAfter 'configIntTest'

    doFirst {
        if(configFile != null) {
            args '--emproperties', configFile
        }
    }
}
